package com.example.mygame.entity.player;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.testcontainers.containers.MongoDBContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

import com.example.mygame.entity.Player;
import com.example.mygame.entity.PlayerRepository;
import com.example.mygame.item.GameItems;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;

@Testcontainers
@SpringBootTest
public class PlayerRepositoryTest {

    @Container
    static MongoDBContainer mongoDBContainer = new MongoDBContainer("mongo:latest");

    @DynamicPropertySource
    static void setProperties(DynamicPropertyRegistry registry) {
        registry.add("spring.data.mongodb.uri", mongoDBContainer::getReplicaSetUrl);
    }

    @Autowired
    private PlayerRepository playerRepository;

    @Autowired
    private Player player;

    @AfterEach
    public void cleanup() {
        this.playerRepository.deleteAll();
    }

    @Test
    public void shouldSaveAndFindPlayerByName() {
        // 1. Arrange
        player.setName("TestPlayer");

        // 2. Act
        playerRepository.save(player);
        Optional<Player> foundPlayerOptional = playerRepository.findByName("TestPlayer");
        
        // 3. Assert
        assertTrue(foundPlayerOptional.isPresent(), "Player should be found in the database");        
        Player foundPlayer = foundPlayerOptional.get();
        assertEquals("TestPlayer", foundPlayer.getName(), "The player's name should match");
        assertNotNull(foundPlayer.getId(), "Player ID should be generated by MongoDB");


    }

    @Test 
    public void playerHasRustySword() {
         // 1. Arrange
        player.setName("TestPlayer");

        // 2. Act
        playerRepository.save(player);
        Optional<Player> foundPlayerOptional = playerRepository.findByName("TestPlayer");
        Player foundPlayer = foundPlayerOptional.get();

        // 3. Assert
        assertTrue(foundPlayer.getInventory().getItems().containsKey(GameItems.RUSTY_SWORD.getName()));
    }

    @Test
    public void playerCanUseSwordAndTakeDamage() {
        // 1. Arrange
        player.setName("TestPlayer");

        // 2. Act
        playerRepository.save(player);
        Optional<Player> foundPlayerOptional = playerRepository.findByName("TestPlayer");
        Player foundPlayer = foundPlayerOptional.get();
        foundPlayer.attack(foundPlayer);

        // 3. Assert
        assertTrue(foundPlayer.getHealth() < 100);    
    }
}
